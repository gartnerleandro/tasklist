{"version":3,"sources":["components/dropdown/Dropdown.jsx","components/dropdown/index.js","components/card/Card.jsx","components/list/List.jsx","components/modal/Modal.jsx","components/filters/Filters.jsx","components/colorPicker/ColorPicker.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Dropdown","children","useCustomContent","useCustomButton","renderCustomButton","useState","showMenu","setShowMenu","closeMenu","useCallback","document","removeEventListener","openMenu","addEventListener","useEffect","toggleMenu","event","preventDefault","className","type","onClick","defaultProps","CARD_STATUS","Card","element","onDelete","onStatusChange","status","title","body","color","style","borderLeft","borderColor","List","elements","onDeleteCard","onCardStatusChange","length","TransitionGroup","map","CSSTransition","key","id","timeout","appear","enter","exit","unmountOnExit","Modal","showModal","onClose","Filters","onFilterChange","selectedFilter","ColorPicker","colors","onSelectColor","selectedColor","setSelectedColor","onClickColor","label","backgroundColor","App","setShowModal","setTitle","setBody","setColor","setSelectedFilter","filteredTasks","setFilteredTasks","tasks","setTasks","newTasks","filter","task","closeModal","cardId","prevStatus","taskIndex","findIndex","nextStatus","splice","placeholder","value","onChange","target","rows","push","disabled","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.12133245.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nconst Dropdown = ({\n  children,\n  useCustomContent,\n  useCustomButton,\n  renderCustomButton,\n}) => {\n  const [showMenu, setShowMenu] = useState(false);\n\n  const closeMenu = useCallback(() => {\n    setShowMenu(false);\n\n    document.removeEventListener('click', closeMenu);\n  }, []);\n\n  const openMenu = useCallback(() => {\n    setShowMenu(true);\n\n    document.addEventListener('click', closeMenu);\n  }, [closeMenu]);\n\n  useEffect(() => () => {\n    document.removeEventListener('click', closeMenu);\n  }, [closeMenu]);\n\n\n  const toggleMenu = (event) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (showMenu) {\n      closeMenu();\n    } else {\n      openMenu();\n    }\n  };\n\n  return (\n    <div className=\"menu-wrapper\">\n      {\n        !useCustomButton ? (\n          <button type=\"button\" onClick={toggleMenu} className=\"menu-button\">\n            <i className=\"fas fa-ellipsis-v\" />\n          </button>\n        ) : (\n          renderCustomButton(toggleMenu)\n        )\n      }\n      {\n        showMenu && !useCustomContent && (\n          <>\n            <i className=\"fas fa-caret-up\" />\n            <div className=\"dropdown-content\">\n              {children}\n            </div>\n          </>\n        )\n      }\n      {\n        showMenu && useCustomContent && (\n          children\n        )\n      }\n    </div>\n  );\n};\n\nDropdown.defaultProps = {\n  children: null,\n  renderCustomButton: null,\n  useCustomButton: false,\n  useCustomContent: false,\n};\n\nDropdown.propTypes = {\n  children: PropTypes.node,\n  renderCustomButton: PropTypes.func,\n  useCustomButton: PropTypes.bool,\n  useCustomContent: PropTypes.bool,\n};\n\nexport default Dropdown;\n","import Dropdown from './Dropdown';\n\nexport default Dropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dropdown from '../dropdown';\n\nimport './index.scss';\n\nexport const CARD_STATUS = {\n  COMPLETED: 'completed',\n  PENDING: 'pending',\n};\n\nconst Card = ({\n  element,\n  onDelete,\n  onStatusChange,\n}) => {\n  const {\n    status, title, body, color,\n  } = element;\n\n  return (\n    <div\n      className={status === CARD_STATUS.PENDING ? 'card' : 'card completed'}\n      style={color && status === CARD_STATUS.PENDING ? {\n        borderLeft: `8px solid ${color}`,\n        borderColor: color,\n      } : {}}\n    >\n      <Dropdown>\n        {\n          !!onStatusChange && (\n            <button type=\"button\" onClick={onStatusChange} className=\"status-button\">\n              {\n                status === CARD_STATUS.PENDING ? (\n                  <i className=\"fas fa-check\" />\n                ) : (\n                  <i className=\"fas fa-clock\" />\n                )\n              }\n              {status === CARD_STATUS.PENDING ? 'Complete' : 'Pending'}\n            </button>\n          )\n        }\n        {\n          !!onDelete && (\n            <button type=\"button\" onClick={onDelete} className=\"delete-button\">\n              <i className=\"fas fa-trash\" />\n              Delete\n            </button>\n          )\n        }\n      </Dropdown>\n      {\n        !!title && (\n          <div className=\"card-title\">\n            {title}\n          </div>\n        )\n      }\n      {\n        !!body && (\n          <div className=\"card-body\">\n            {body}\n          </div>\n        )\n      }\n      {\n        status === CARD_STATUS.COMPLETED && (\n          <span className=\"completed-message\">\n            COMPLETED\n          </span>\n        )\n      }\n    </div>\n  );\n};\n\nCard.defaultProps = {\n  element: {},\n  onDelete: null,\n  onStatusChange: null,\n};\n\nCard.propTypes = {\n  element: PropTypes.exact({\n    id: PropTypes.number,\n    status: PropTypes.oneOf([CARD_STATUS.COMPLETED, CARD_STATUS.PENDING]).isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    color: PropTypes.string,\n  }),\n  onDelete: PropTypes.func,\n  onStatusChange: PropTypes.func,\n};\n\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  CSSTransition,\n  TransitionGroup,\n} from 'react-transition-group';\n\nimport Card from '../card';\n\nimport './index.scss';\n\nconst List = ({ elements, onDeleteCard, onCardStatusChange }) => {\n  if (elements && elements.length) {\n    return (\n      <TransitionGroup className=\"list\">\n        {\n          elements.map((element) => (\n            <CSSTransition\n              key={element.id}\n              timeout={500}\n              appear\n              enter\n              exit\n              unmountOnExit\n            >\n              <Card\n                element={element}\n                key={element.id}\n                onDelete={() => onDeleteCard(element.id)}\n                onStatusChange={() => onCardStatusChange(element.id, element.status)}\n              />\n            </CSSTransition>\n          ))\n        }\n      </TransitionGroup>\n    );\n  }\n\n  return (\n    <div className=\"list\">\n      No elements found\n    </div>\n  );\n};\n\nList.defaultProps = {\n  elements: [],\n  onDeleteCard: () => true,\n  onCardStatusChange: () => true,\n};\n\nList.propTypes = {\n  elements: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object])),\n  onDeleteCard: PropTypes.func,\n  onCardStatusChange: PropTypes.func,\n};\n\nexport default List;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nconst Modal = ({ showModal, children, onClose }) => showModal && (\n  <div className=\"modal-container\">\n    <div className=\"overlay\" />\n    <div className=\"modal\">\n      <button onClick={onClose} type=\"button\" className=\"close-modal\">\n        <i className=\"fas fa-times\" />\n      </button>\n      {children}\n    </div>\n  </div>\n);\n\nModal.defaultProps = {\n  showModal: false,\n  children: null,\n};\n\nModal.propTypes = {\n  showModal: PropTypes.bool,\n  children: PropTypes.node,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { CARD_STATUS } from '../card';\n\nimport './index.scss';\n\nconst Filters = ({ onFilterChange, selectedFilter }) => (\n  <div className=\"filters\">\n    <div className=\"filters-label\">\n      Filter by:\n    </div>\n    <div className=\"buttons-wrapper\">\n      <button\n        onClick={() => onFilterChange(null)}\n        type=\"button\"\n        className={!selectedFilter ? 'filter-button selected' : 'filter-button'}\n      >\n        All\n      </button>\n      <button\n        onClick={() => onFilterChange(CARD_STATUS.COMPLETED)}\n        type=\"button\"\n        className={selectedFilter === CARD_STATUS.COMPLETED ? 'filter-button selected' : 'filter-button'}\n      >\n        Completed\n      </button>\n      <button\n        onClick={() => onFilterChange(CARD_STATUS.PENDING)}\n        type=\"button\"\n        className={selectedFilter === CARD_STATUS.PENDING ? 'filter-button selected' : 'filter-button'}\n      >\n        Pending\n      </button>\n    </div>\n  </div>\n);\n\nFilters.defaultProps = {\n  onFilterChange: () => true,\n  selectedFilter: null,\n};\n\nFilters.propTypes = {\n  onFilterChange: PropTypes.func,\n  selectedFilter: PropTypes.string,\n};\n\nexport default Filters;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dropdown from '../dropdown/Dropdown';\n\nimport './index.scss';\n\nconst defaultColor = '#FFFFFF';\n\nconst ColorPicker = ({ colors, onSelectColor }) => {\n  const [selectedColor, setSelectedColor] = useState(null);\n\n  const onClickColor = (color) => {\n    onSelectColor(color);\n    setSelectedColor(color);\n  };\n\n  const renderButton = (onClick) => (\n    <button\n      type=\"button\"\n      label={selectedColor || defaultColor}\n      className=\"selected-color\"\n      style={{\n        backgroundColor: selectedColor || defaultColor,\n        borderColor: selectedColor || '#8e8e8e',\n      }}\n      onClick={onClick}\n    />\n  );\n\n  return (\n    <div className=\"color-picker\">\n      <Dropdown\n        renderCustomButton={renderButton}\n        useCustomButton\n        useCustomContent\n      >\n        <i className=\"fas fa-caret-up arrow\" style={{ color: selectedColor || '#8e8e8e' }} />\n        <div className=\"picker-content\" style={{ backgroundColor: selectedColor || defaultColor, borderColor: selectedColor || defaultColor }}>\n          <div\n            className=\"selected-color-label\"\n            style={{ color: selectedColor ? '#FFFFFF' : '#8e8e8e' }}\n          >\n            {selectedColor || 'No color selected'}\n          </div>\n          <div className=\"colors-list\">\n            <button\n              type=\"button\"\n              label=\"noColor\"\n              className=\"color-button\"\n              style={{\n                backgroundColor: 'transparent',\n                borderColor: 'transparent',\n              }}\n              onClick={() => onClickColor(null)}\n            >\n              <i className=\"fas fa-times\" />\n            </button>\n            {colors.map((color) => (\n              <button\n                key={color}\n                type=\"button\"\n                label={color}\n                className=\"color-button\"\n                style={{\n                  backgroundColor: color,\n                  borderColor: color,\n                }}\n                onClick={() => onClickColor(color)}\n              />\n            ))}\n          </div>\n        </div>\n      </Dropdown>\n    </div>\n  );\n};\n\nColorPicker.defaultProps = {\n  colors: ['#D9E3F0', '#F47373', '#697689', '#37D67A', '#2CCCE4', '#555555', '#DCE775', '#FF8A65', '#BA68C8'],\n  onSelectColor: () => true,\n};\n\nColorPicker.propTypes = {\n  colors: PropTypes.arrayOf(PropTypes.string),\n  onSelectColor: PropTypes.func,\n};\n\nexport default ColorPicker;\n","import React, { useState, useEffect } from 'react';\nimport List from './components/list/List';\n\nimport { CARD_STATUS } from './components/card';\nimport Modal from './components/modal/Modal';\nimport Filters from './components/filters/Filters';\nimport ColorPicker from './components/colorPicker/ColorPicker';\n\nimport './index.scss';\n\nconst App = () => {\n  const [showModal, setShowModal] = useState(false);\n  const [title, setTitle] = useState('');\n  const [body, setBody] = useState('');\n  const [color, setColor] = useState(null);\n  const [selectedFilter, setSelectedFilter] = useState(null);\n  const [filteredTasks, setFilteredTasks] = useState([]);\n  const [tasks, setTasks] = useState([\n    {\n      id: 1,\n      title: 'Code',\n      body: 'Create my own app',\n      status: CARD_STATUS.COMPLETED,\n      color: '#D9E3F0',\n    },\n    {\n      id: 2,\n      title: 'Sleep',\n      body: 'Go to sleep at 00:00',\n      status: CARD_STATUS.PENDING,\n      color: '#D9E3F0',\n    },\n    {\n      id: 3,\n      title: 'Play the piano',\n      body: 'Piano lesson at 12:30',\n      status: CARD_STATUS.COMPLETED,\n      color: '#D9E3F0',\n    },\n  ]);\n\n  useEffect(() => {\n    let newTasks = [...tasks];\n\n    if (selectedFilter) {\n      newTasks = tasks.filter((task) => task.status === selectedFilter);\n    }\n\n    setFilteredTasks(newTasks);\n  }, [selectedFilter, tasks]);\n\n  const onDeleteCard = (cardId) => {\n    const newTasks = [...filteredTasks];\n    const taskIndex = newTasks.findIndex((task) => task.id === cardId);\n\n    if (taskIndex > -1) {\n      newTasks.splice(taskIndex, 1);\n      setTasks(newTasks);\n    }\n  };\n\n  const onCardStatusChange = (cardId, prevStatus) => {\n    const newTasks = [...filteredTasks];\n    const taskIndex = newTasks.findIndex((task) => task.id === cardId);\n    const nextStatus = prevStatus === CARD_STATUS.PENDING ? CARD_STATUS.COMPLETED\n      : CARD_STATUS.PENDING;\n\n    if (taskIndex > -1) {\n      newTasks[taskIndex].status = nextStatus;\n      setTasks(newTasks);\n    }\n  };\n\n  const closeModal = () => {\n    setShowModal(false);\n    setTitle('');\n    setBody('');\n    setColor(null);\n  };\n\n  const openModal = () => {\n    setShowModal(true);\n  };\n\n  const onTitleChange = (event) => {\n    setTitle(event.target.value);\n  };\n\n  const onBodyChange = (event) => {\n    setBody(event.target.value);\n  };\n\n  const onAddNew = () => {\n    const newTasks = [...tasks];\n    newTasks.push({\n      id: tasks.length + tasks.length + 1,\n      title,\n      body,\n      status: CARD_STATUS.PENDING,\n      color,\n    });\n    setTasks(newTasks);\n    closeModal();\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <Filters\n          onFilterChange={setSelectedFilter}\n          selectedFilter={selectedFilter}\n        />\n      </div>\n      <List\n        elements={filteredTasks}\n        onCardStatusChange={onCardStatusChange}\n        onDeleteCard={onDeleteCard}\n      />\n      <Modal showModal={showModal} onClose={closeModal}>\n        <div className=\"modal-content\">\n          <div className=\"section\">\n            <input placeholder=\"Title\" value={title} onChange={onTitleChange} />\n          </div>\n          <div className=\"color-section\">\n            <span className=\"task-color-label\">\n              Task color:\n            </span>\n            <ColorPicker onSelectColor={setColor} />\n          </div>\n          <div className=\"section\">\n            <textarea\n              placeholder=\"Content\"\n              value={body}\n              onChange={onBodyChange}\n              rows={5}\n            />\n          </div>\n          <div className=\"section\">\n            <button\n              onClick={onAddNew}\n              type=\"button\"\n              className=\"add\"\n              disabled={!title || !body}\n            >\n              Add\n            </button>\n          </div>\n        </div>\n      </Modal>\n      <button onClick={openModal} type=\"button\" className=\"add-button\">\n        <i className=\"fas fa-plus\" />\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}